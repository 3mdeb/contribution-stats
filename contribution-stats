#!/usr/bin/env bash
# This script was generated by bashly 1.0.4 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
contribution_stats_usage() {
  if [[ -n $long_usage ]]; then
    printf "contribution-stats - Script gathering contribution stats from upstream projects\n"
    echo

  else
    printf "contribution-stats - Script gathering contribution stats from upstream projects\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  contribution-stats COMMAND\n"
  printf "  contribution-stats [COMMAND] --help | -h\n"
  printf "  contribution-stats --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Clone and/or all tracked upstream repositories\n" "sync"
  printf "  %s   List contribution stats\n" "list"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
contribution_stats_sync_usage() {
  if [[ -n $long_usage ]]; then
    printf "contribution-stats sync - Clone and/or all tracked upstream repositories\n"
    echo

  else
    printf "contribution-stats sync - Clone and/or all tracked upstream repositories\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "Usage:"
  printf "  contribution-stats sync\n"
  printf "  contribution-stats sync --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  contribution-stats sync\n"
    echo

  fi
}

# :command.usage
contribution_stats_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "contribution-stats list - List contribution stats\n"
    echo

  else
    printf "contribution-stats list - List contribution stats\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  contribution-stats list [OPTIONS]\n"
  printf "  contribution-stats list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--repo, -r REPOSITORY"
    printf "    Repository to analyze. If not given, all tracked repositories will be\n    analyzed.\n"
    echo

    # :flag.usage
    printf "  %s\n" "--start-date, -s DATE"
    printf "    Start date for analyze - only commits older than this date will be listed.\n    Defaults to 01/01/2013.\n"
    printf "    Default: 01/01/2013\n"
    echo

    # :flag.usage
    printf "  %s\n" "--end-date, -e DATE"
    printf "    End date for analyze - only commits younger than this date will be listed.\n    Defaults to 31/12/2050.\n"
    printf "    Default: 31/12/2050\n"
    echo

    # :flag.usage
    printf "  %s\n" "--out, -o OUTPUT"
    printf "    Path to the output CSV file\n"
    printf "    Default: list.csv\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  contribution-stats list\n"
    printf "  contribution-stats list -r coreboot -s 21/02/2023\n"
    printf "  contribution-stats list -r coreboot -s 21/02/2023\n"
    printf "  contribution-stats list -r coreboot -s 01/01/2021 -e 31/12/2022\n"
    printf "  contribution-stats list -r coreboot -s 21/02/2023 -o coreboot.csv\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
contribution_stats_sync_command() {
  # src/sync_command.sh
  # SPDX-FileCopyrightText: 2023 3mdeb <contact@3mdeb.com>
  #
  # SPDX-License-Identifier: MIT

  echo "Syncing repositories..."

  mkdir -p "${REPOS_DIR}"

  if pushd "${REPOS_DIR}" &> /dev/null; then
      for repo in "${!REPOS[@]}"; do
          _dir="$repo"
          _url="${REPOS[$repo]}"

          echo $_dir
          if [ ! -d "$_dir" ]; then
              git clone "$_url" "$_dir"
          else
              ( cd "$_dir" || exit; git fetch origin )
          fi
      done
      popd &> /dev/null
  fi

}

# :command.function
contribution_stats_list_command() {
  # src/list_command.sh
  # SPDX-FileCopyrightText: 2023 3mdeb <contact@3mdeb.com>
  #
  # SPDX-License-Identifier: MIT

  START_DATE="${args[--start-date]}"
  END_DATE="${args[--end-date]}"
  REPO="${args[--repo]}"
  OUTPUT_FILE=$(readlink -f "${args[--out]}")

  list_single_repo() {
      _repo="${1}"

      if pushd "${REPOS_DIR}/${_repo}" &> /dev/null; then
          # Each commit will be presented in a similar pattern:
          #
          #__COMMIT_START__
          # b2f5a22c4a3f;Karol Zmyslowski;karol.zmyslowski@3mdeb.com;04/21/2023;util/inteltool: Add support for Jasper Lake
          # util/inteltool: Add support for Jasper Lake
          #
          # Tested on: Intel N5105 (Jasperlake Family, Intel Celeron processor)
          # Based on Intel Pentium Silver and Intel Celeron Processor Datasheet,
          #         vol. 2 of 2 revision 001 (DOC# 634545)
          #
          # Change-Id: If4134bd03f5544b5845cde998ee526e5ddd5b51d
          # Signed-off-by: Karol Zmyslowski <karol.zmyslowski@3mdeb.com>
          # Reviewed-on: https://review.coreboot.org/c/coreboot/+/73934
          # Tested-by: build bot (Jenkins) <no-reply@coreboot.org>
          # Reviewed-by: Michał Żygowski <michal.zygowski@3mdeb.com>
          #
          # __COMMIT_END__
          #  6 files changed, 682 insertions(+)
          #
          LOG_FORMAT="__COMMIT_START__%n%h;%aN;%ae;%cd;%s%n%B%n__COMMIT_END__"
          DATE_FORMAT="%m/%d/%Y"

          echo "Listing contributions for: ${_repo}, after: ${START_DATE}, before: ${END_DATE}"

          # Use git log with a custom format to extract necessary information
          # and then filter by 3mdeb.com email domain. If 3mdeb.com domain is present,
          # process via awk to extract insertions/deletaions numbers. Additionally,
          # extract the link do Gerrit, if "Reviewed-on:" tag was present in the commit
          # body.
          git log --pretty=format:"${LOG_FORMAT}" \
                  --date=format:"${DATE_FORMAT}" \
                  --author=@3mdeb.com \
                  --shortstat \
                  --no-merges \
                  --after=${START_DATE} \
                  --before=${END_DATE} \
                  --all |
          awk -F'[;]' -v repo="${_repo}" '
              /__COMMIT_START__/ {
                  getline
                  commit = $1
                  author = $2
                  date = $4
                  reviewed_on = ""
                  getline
                  while ($0 != "__COMMIT_END__") {
                      if (match($0, /Reviewed-on: (.*)/, m)) {
                          reviewed_on = m[1]
                      }
                      getline
                  }
                  next
              }
              /files? changed/ {
                  if (match($0, /([0-9]+) insertion/, m)) insertions = m[1]
                  if (match($0, /([0-9]+) deletion/, m)) deletions = m[1]
                  printf "%s;%s;%s;%s;%s;%d;%d\n", commit, author, date, repo, reviewed_on, insertions, deletions
                  insertions = deletions = 0
                  reviewed_on = ""
              }
          ' >> "${OUTPUT_FILE}"

          # Example output entry looks like follows:
          # 97fe17ff5984;Sergii Dmytruk;11/19/2022;https://review.coreboot.org/c/coreboot/+/68746;30;6
          #
          popd &> /dev/null
      fi
  }

  list_all_repos() {
     for repo in "${!REPOS[@]}"; do
         _dir="$repo"
         _url="${REPOS[$repo]}"

         list_single_repo "${_dir}"
     done
  }

  rm -f "${OUTPUT_FILE}"

  if [ -z "${REPO}" ]; then
      echo "Listing contributions for all tracked repositories..."
      list_all_repos
  else
      echo "Listing contributions for only selected repository: ${REPO}..."
      list_single_repo "${REPO}"
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        contribution_stats_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    sync | s)
      action="sync"
      shift
      contribution_stats_sync_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      contribution_stats_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      contribution_stats_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
contribution_stats_sync_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        contribution_stats_sync_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="sync"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
contribution_stats_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        contribution_stats_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --repo | -r)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--repo']="$2"
          shift
          shift
        else
          printf "%s\n" "--repo requires an argument: --repo, -r REPOSITORY" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --start-date | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--start-date']="$2"
          shift
          shift
        else
          printf "%s\n" "--start-date requires an argument: --start-date, -s DATE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --end-date | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--end-date']="$2"
          shift
          shift
        else
          printf "%s\n" "--end-date requires an argument: --end-date, -e DATE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --out | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--out']="$2"
          shift
          shift
        else
          printf "%s\n" "--out requires an argument: --out, -o OUTPUT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--start-date']:-} ]] || args['--start-date']="01/01/2013"
  [[ -n ${args['--end-date']:-} ]] || args['--end-date']="31/12/2050"
  [[ -n ${args['--out']:-} ]] || args['--out']="list.csv"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  #
  # SPDX-FileCopyrightText: 2023 3mdeb <contact@3mdeb.com>
  #
  # SPDX-License-Identifier: MIT

  #

  declare -A -g REPOS=(
      ["DPorts"]="https://github.com/DragonFlyBSD/DPorts.git"
      ["DragonFlyBSD"]="https://github.com/DragonFlyBSD/DragonFlyBSD.git"
      ["Octopress-LastFM-Aside"]="https://github.com/sankroh/Octopress-LastFM-Aside.git"
      ["PSPTool"]="https://github.com/PSPReverse/PSPTool.git"
      ["QCBOR"]="https://github.com/laurencelundblade/QCBOR.git"
      ["TrenchBoot.github.io"]="https://github.com/TrenchBoot/TrenchBoot.github.io.git"
      ["acpica"]="https://github.com/acpica/acpica.git"
      ["ansible-role-customize-gnome"]="https://github.com/PeterMosmans/ansible-role-customize-gnome.git"
      ["armbian-build"]="https://github.com/armbian/build.git"
      ["backends"]="https://gitlab.com/sane-project/backends.git"
      ["batch2bash"]="https://github.com/gajop/batch2bash.git"
      ["charra"]="https://github.com/Fraunhofer-SIT/charra.git"
      ["chirpstack-gateway-os"]="https://github.com/chirpstack/chirpstack-gateway-os.git"
      ["coreboot"]="https://review.coreboot.org/coreboot.git"
      ["cukinia"]="https://github.com/savoirfairelinux/cukinia.git"
      ["debos"]="https://github.com/go-debos/debos.git"
      ["documentation"]="https://github.com/TrenchBoot/documentation.git"
      ["ec"]="https://github.com/system76/ec.git"
      ["fiedka"]="https://github.com/fiedka/fiedka.git"
      ["flashrom"]="https://review.coreboot.org/flashrom.git"
      ["freebsd-ports"]="https://github.com/freebsd/freebsd-ports.git"
      ["freebsd-src"]="https://git.FreeBSD.org/src.git"
      ["fwupd"]="https://github.com/fwupd/fwupd.git"
      ["homepage"]="https://review.coreboot.org/homepage.git"
      ["isar"]="https://github.com/ilbers/isar.git"
      ["kas"]="https://github.com/siemens/kas.git"
      ["landing-zone"]="https://github.com/TrenchBoot/landing-zone.git"
      ["libwpe"]="https://github.com/WebPlatformForEmbedded/libwpe.git"
      ["linux"]="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git"
      ["meta-eid"]="https://github.com/eid-project/meta-eid.git"
      ["meta-openembedded"]="https://github.com/openembedded/meta-openembedded.git"
      ["meta-openwrt"]="https://github.com/kraj/meta-openwrt.git"
      ["meta-riscv"]="https://github.com/riscv/meta-riscv.git"
      ["meta-riscv"]="https://github.com/riscv/meta-riscv.git"
      ["meta-security"]="https://git.yoctoproject.org/meta-security"
      ["meta-sunxi"]="https://github.com/linux-sunxi/meta-sunxi.git"
      ["meta-swupdate"]="https://github.com/sbabic/meta-swupdate.git"
      ["meta-virtualization"]="git://git.yoctoproject.org/meta-virtualization"
      ["meta-webkit"]="https://github.com/Igalia/meta-webkit.git"
      ["netbsd-pkgsrc"]="https://github.com/NetBSD/pkgsrc.git"
      ["netbsd-src"]="https://github.com/NetBSD/src.git"
      ["openbsd-ports"]="https://github.com/openbsd/ports.git"
      ["openbsd-src"]="https://github.com/openbsd/src.git"
      ["poky"]="git://git.yoctoproject.org/poky"
      ["pycom-documentation"]="https://github.com/pycom/pycom-documentation.git"
      ["qubes-antievilmaid"]="https://github.com/QubesOS/qubes-antievilmaid.git"
      ["qubes-app-linux-split-gpg2"]="https://github.com/HW42/qubes-app-linux-split-gpg2.git"
      ["qubes-builder-rpm"]="https://github.com/QubesOS/qubes-builder-rpm.git"
      ["rpi-build"]="https://github.com/notro/rpi-build.git"
      ["seabios"]="https://review.coreboot.org/seabios.git"
      ["swupdate"]="https://github.com/sbabic/swupdate.git"
      ["systemd"]="https://github.com/systemd/systemd.git"
      ["trenchboot-issues"]="https://github.com/TrenchBoot/trenchboot-issues.git"
      ["u-boot"]="https://source.denx.de/u-boot/u-boot.git"
      ["xen"]="git://xenbits.xen.org/xen.git"
  )

  REPOS_DIR="repos"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "sync") contribution_stats_sync_command ;;
    "list") contribution_stats_list_command ;;
  esac
}

initialize
run "$@"
